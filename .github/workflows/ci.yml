name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Build and run interactive shell'
        required: false
        default: false

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  # Installation of dependencies is too OS-dependent now, we don't
  # miss that much by particularizing this in a per-OS basis.
  
  build-linux-appimage:
    runs-on: ubuntu-18.04
    steps:
    - name: Setup interactive shell session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install sndfile
      run: sudo apt-get install libsndfile1-dev

    # libvolk2-dev is not available in Ubuntu 18.04
    - name: Install Volk
      run: sudo apt-get install libvolk1-dev

    - name: Install cURL
      run: sudo apt-get install libcurl4-openssl-dev
      
    - name: Install FFTW3
      run: sudo apt-get install libfftw3-dev

    - name: Install SoapySDR modules
      run: sudo apt-get install soapysdr-module-all

    - name: Install SoapySDR development files
      run: sudo apt-get install libsoapysdr-dev

    - name: Install libxml2
      run: sudo apt-get install libxml2-dev

    - name: Install portaudio
      run: sudo apt-get install portaudio19-dev

    - name: Install ALSA libraries
      run: sudo apt-get install libasound2-dev
    
    - name: Download linuxdeployqt AppImage
      run: wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
    
    - name: Install linuxdeployqt system-wide
      run: |
        sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/bin/linuxdeployqt
        sudo chmod a+x /usr/bin/linuxdeployqt

    - name: Download appimagetool
      run: wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
    
    - name: Install appimagetool system-wide
      run: |
        sudo mv appimagetool-x86_64.AppImage /usr/bin/appimagetool
        sudo chmod a+x /usr/bin/appimagetool
    
    - name: Checkout (SigDigger)
      uses: actions/checkout@v2
      with:
        repository: BatchDrake/SigDigger
        ref: refs/heads/develop
        path: SigDigger

    - name: Build & Distribute (SigDigger)
      run: |
        cd SigDigger/Scripts
        chmod a+x dist-appimage.sh
        export LD_LIBRARY_PATH="$LD_LIBRARY_PATH":"$PWD"/deploy-root/lib
        SIGDIGGER_EMBED_SOAPYSDR=1 ./dist-appimage.sh 
        cd ../..

    - name: Archive AppImage files
      uses: actions/upload-artifact@v2
      with:
        name: linux-latest-appimage
        path: SigDigger/Scripts/*.AppImage

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Setup interactive shell session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install sndfile
      run: brew install libsndfile

    - name: Install Volk
      run: brew install volk

    - name: Install cURL
      run: brew install curl

    - name: Install FFTW3
      run: brew install fftw

    - name: Adding SoapySDR taps (Pothos)
      run: brew tap pothosware/homebrew-pothos && brew update

    - name: Install SoapySDR (Pothos)
      run: brew install pothossoapy

    - name: Fix brew/SoapySDR linking disaster
      run: |
        rm -f /usr/local/lib/libSoapySDR.0.8.dylib
        ln -s /usr/local/lib/libSoapySDR.0.8.1.dylib /usr/local/lib/libSoapySDR.0.8.dylib
    
    - name: Creating modules0.8
      run: sudo mkdir -p /usr/local/lib/SoapySDR/modules0.8

    # - name: Install SDRPlay API
    #  run: wget https://www.sdrplay.com/software/SDRplay_RSP_API-MacOSX-3.07.3.pkg && sudo installer -pkg SDRplay_RSP_API-MacOSX-3.07.3.pkg -target /

    # - name: Build and install SoapySDR module for SDRPlay
    #   run: git clone https://github.com/pothosware/SoapySDRPlay3 && cd SoapySDRPlay3 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    # soapyosmo   removed because of random compilation errors
    # soapyuhd    removed for the same reason
    # soapyaudio  removed as it keeps breaking
    # soapyremote removed because it crashes for whatever reason
    # SDRPlay support removed becuase it hangs SoapySDR on startup
    - name: Install SoapySDR modules (Pothos)
      run: |
        sudo chmod -R a+rw /usr/local/lib/SoapySDR/modules0.8
        brew install soapyrtlsdr soapyhackrf soapybladerf soapyairspy soapyairspyhf soapyredpitaya soapyiris limesuite soapyplutosdr

    - name: Remove SoapySDR remote module to prevent crashes
      run: sudo rm /usr/local/lib/SoapySDR/modules0.8/libremote*

    - name: Install libxml2
      run: brew install libxml2

    - name: Install portaudio
      run: brew install portaudio

    - name: Checkout (SigDigger)
      uses: actions/checkout@v2
      with:
        repository: BatchDrake/SigDigger
        ref: refs/heads/develop
        path: SigDigger

    - name: Build & Distribute (SigDigger)
      run: |
        cd SigDigger/Scripts
        chmod a+x dist-dmg.sh
        SIGDIGGER_EMBED_SOAPYSDR=1 ./dist-dmg.sh
        cd ../..

    - name: Archive .DMG files
      uses: actions/upload-artifact@v2
      with:
        name: macos-latest-dmg
        path: SigDigger/Scripts/*.dmg
  # Windows
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-cc mingw-w64-x86_64-make mingw-w64-x86_64-cmake mingw-w64-x86_64-libsndfile mingw-w64-x86_64-fftw mingw-w64-x86_64-volk mingw-w64-x86_64-libxml2 mingw-w64-x86_64-libusb
          
      # SigUtils
      - name: Checkout (sigutils)
        uses: actions/checkout@v2
        with:
          repository: BatchDrake/sigutils
          ref: refs/heads/develop
          path: sigutils
        
      - name: Configure sigutils
        run: C:\\msys64\\mingw64\\bin\\cmake -G"MinGW Makefiles" -B D:\\a\\SigDigger\\SigDigger\\sigutils\\build -DCMAKE_INSTALL_PREFIX:PATH=C:\\msys64\\mingw64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} D:\\a\\SigDigger\\SigDigger\\sigutils
        
      - name: Build sigutils
        run: C:\\msys64\\mingw64\\bin\\cmake --build D:\\a\\SigDigger\\SigDigger\\sigutils\\build --config ${{env.BUILD_TYPE}}
        
      - name: Install sigutils
        run: C:\\msys64\\mingw64\\bin\\cmake --build D:\\a\\SigDigger\\SigDigger\\sigutils\\build --config ${{env.BUILD_TYPE}} --target install
        
      # SoapySDR
      - name: Checkout (soapysdr)
        uses: actions/checkout@v2
        with:
          repository: pothosware/SoapySDR
          ref: refs/heads/master
          path: SoapySDR
        
      - name: Configure
        run: C:\\msys64\\mingw64\\bin\\cmake -G"MinGW Makefiles" -B  D:\\a\\SigDigger\\SigDigger\\SoapySDR\\build -DCMAKE_INSTALL_PREFIX:PATH=C:\\msys64\\mingw64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  D:\\a\\SigDigger\\SigDigger\\SoapySDR\\
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\SoapySDR\\build --config ${{env.BUILD_TYPE}}
        
      - name: Install sigutils
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\SoapySDR\\build --config ${{env.BUILD_TYPE}} --target install
        
      # BatchDrake's fixed rtl-sdr
      - name: Checkout (rtl-sdr-blog)
        uses: actions/checkout@v2
        with:
          repository: BatchDrake/rtl-sdr-blog
          ref: refs/heads/feature/xfer-completion
          path: rtl-sdr-blog
        
      - name: Configure
        run: C:\\msys64\\mingw64\\bin\\cmake -G"MinGW Makefiles" -B  D:\\a\\SigDigger\\SigDigger\\rtl-sdr-blog\\build -DCMAKE_INSTALL_PREFIX:PATH=C:\\msys64\\mingw64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  D:\\a\\SigDigger\\SigDigger\\rtl-sdr-blog\\
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\rtl-sdr-blog\\build --config ${{env.BUILD_TYPE}}
        
      - name: Install
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\rtl-sdr-blog\\build --config ${{env.BUILD_TYPE}} --target install
        
      # SoapyRTLSDR
      - name: Checkout (soapyrtlsdr)
        uses: actions/checkout@v2
        with:
          repository: pothosware/SoapyRTLSDR
          ref: refs/heads/master
          path: SoapyRTLSDR
        
      - name: Configure
        run: C:\\msys64\\mingw64\\bin\\cmake -G"MinGW Makefiles" -B  D:\\a\\SigDigger\\SigDigger\\SoapyRTLSDR/build -DCMAKE_INSTALL_PREFIX:PATH=C:\\msys64\\mingw64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  D:\\a\\SigDigger\\SigDigger\\SoapyRTLSDR\\
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\SoapyRTLSDR\\build --config ${{env.BUILD_TYPE}}
        
      - name: Install
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\SoapyRTLSDR\\build --config ${{env.BUILD_TYPE}} --target install
        
      # suscan
      - name: Checkout (suscan)
        uses: actions/checkout@v2
        with:
          repository: BatchDrake/suscan
          ref: refs/heads/develop
          path: suscan
      
      - name: Configure CMake
        run: |
          export PKG_CONFIG_PATH=C:\\msys64\\mingw64\\lib\\pkgconfig\\
          C:\\msys64\\mingw64\\bin\\cmake -B  D:\\a\\SigDigger\\SigDigger\\suscan\\build -G"MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=C:\\msys64\\mingw64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  D:\\a\\SigDigger\\SigDigger\\suscan\\
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\suscan\\build --config ${{env.BUILD_TYPE}}
        
      - name: Install
        run: C:\\msys64\\mingw64\\bin\\cmake --build  D:\\a\\SigDigger\\SigDigger\\suscan\\build --config ${{env.BUILD_TYPE}} --target install
        
      # SuWidgets
      - name: Checkout (suscan)
        uses: actions/checkout@v2
        with:
          repository: BatchDrake/SuWidgets
          ref: refs/heads/develop
          path: suscan

      - name: Configure QMake
        run: C:\\msys64\\mingw64\\bin\\qmake D:\\a\\SigDigger\\SuWidgets\\SuWidgetsLib.pro "CONFIG += release" PREFIX="/mingw64"
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\mingw32-make -C D:\\a\\SigDigger\\SuWidgets\\
        
      - name: Install
        run: C:\\msys64\\mingw64\\bin\\mingw32-make -C D:\\a\\SigDigger\\SuWidgets\\ install
        
      # SigDigger
      - name: Checkout (suscan)
        uses: actions/checkout@v2
        with:
          repository: BatchDrake/SuWidgets
          ref: refs/heads/develop
          path: suscan
        
      - name: Configure QMake
        run: C:\\msys64\\mingw64\\bin\\qmake D:\\a\\SigDigger\\SuWidgets\\SuWidgetsLib.pro "CONFIG += release" PREFIX="/mingw64" SUWIDGETS_PREFIX=/mingw64
        
      - name: Build
        run: C:\\msys64\\mingw64\\bin\\mingw32-make -C D:\\a\\SigDigger\\SigDigger\\
        
      - name: Install
        run: C:\\msys64\\mingw64\\bin\\mingw32-make -C D:\\a\\SigDigger\\SigDigger\\ install
